{"version":3,"sources":["components/ItalyMap.js","components/Chat.js","components/Overlay.js","App.js","index.js"],"names":["ItalyMap","socketConnection","useState","markers","setMarkers","useEffect","on","data","concat","uuid","position","lat","Number","long","close","Map","center","zoom","zoomControl","dragging","scrollWheelZoom","doubleClickZoom","TileLayer","attribution","url","map","marker","Marker","key","icon","DivIcon","className","onAdd","setTimeout","filter","m","ChatWrapper","styled","div","MessagesWrapper","SendButton","button","ChatTextArea","textarea","_getRandomColor","color","i","Math","floor","random","Chat","handleTextChange","text","onSend","messages","setMessages","length","slice","id","message","msg","style","marginTop","onChange","value","maxLength","onClick","StyledOverlay","props","isVisible","Overlay","Wrapper","App","setMessage","setPosition","navigator","geolocation","getCurrentPosition","height","mobile","event","target","emit","coords","latitude","longitude","socket","require","io","ReactDOM","render","document","getElementById"],"mappings":"ySAyDeA,EApDE,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,iBAAuB,EACXC,mBAAS,IADE,mBAClCC,EADkC,KACzBC,EADyB,KAGzCC,oBAAU,WAgBR,OAfAJ,EAAiBK,GACf,MACA,SAAAC,GACEH,EAAW,SAAAD,GACT,OAAOA,EAAQK,OAAO,CACpB,CACEC,KAAMA,OACNC,SAAU,CAAEC,IAAKC,OAAOL,EAAKI,KAAME,KAAMD,OAAOL,EAAKM,aAK7D,IAGK,kBAAMZ,EAAiBa,UAE7B,IASH,OACE,kBAACC,EAAA,EAAD,eAAKC,OAAQ,CAAC,MAAO,OAAQC,KAAM,GARvB,CACZC,aAAa,EACbC,UAAU,EACVC,iBAAiB,EACjBC,iBAAiB,IAKf,kBAACC,EAAA,EAAD,CACEC,YAAY,qEACZC,IAAI,4DAELrB,EAAQsB,IAAI,SAAAC,GAAM,OACjB,kBAACC,EAAA,EAAD,CACEC,IAAKF,EAAOjB,KACZC,SAAU,CAACgB,EAAOhB,SAASC,IAAKe,EAAOhB,SAASG,MAChDgB,KAAM,IAAIC,UAAQ,CAAEC,UAAW,kBAC/BC,MAAO,kBACLC,WAAW,WACT7B,EAAW,SAAAD,GAAO,OAAIA,EAAQ+B,OAAO,SAAAC,GAAC,OAAIA,EAAE1B,OAASiB,EAAOjB,UAC3D,Y,4yBC9Cf,IAAM2B,EAAcC,IAAOC,IAAV,KAQXC,EAAkBF,IAAOC,IAAV,KAUfE,EAAaH,IAAOI,OAAV,KAUVC,EAAeL,IAAOM,SAAV,KASZC,EAAkB,WAGtB,IAFA,IACIC,EAAQ,IACHC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,GAHc,mBAGGE,KAAKC,MAAsB,GAAhBD,KAAKE,WAEnC,OAAOJ,GAsDMK,EAnDF,SAAC,GAA0D,IAAxDjD,EAAuD,EAAvDA,iBAAkBkD,EAAqC,EAArCA,iBAAkBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAAa,EACrCnD,mBAAS,IAD4B,mBAC9DoD,EAD8D,KACpDC,EADoD,KAiCrE,OA9BAlD,oBAAU,WAyBR,OAxBAJ,EAAiBK,GAAG,MAAO,SAAAC,GAfX,KAgBV+C,EAASE,OACXD,EAAY,SAAAD,GAAQ,OAClBA,EAASG,MAAM,GAAGjD,OAAO,CACvB,CACEkD,GAAInD,EAAKoD,QAAQD,GACjBN,KAAM7C,EAAKoD,QAAQP,KACnBP,MAAOD,SAKbW,EAAY,SAAAD,GAAQ,OAClBA,EAAS9C,OAAO,CACd,CACEkD,GAAInD,EAAKoD,QAAQD,GACjBN,KAAM7C,EAAKoD,QAAQP,KACnBP,MAAOD,WAOV,kBAAM3C,EAAiBa,UAG7B,IAGD,kBAACsB,EAAD,KACE,kBAACG,EAAD,KACGe,EAAS7B,IAAI,SAAAmC,GAAG,OACf,uBAAGhC,IAAKgC,EAAIF,GAAIG,MAAO,CAAEhB,MAAOe,EAAIf,QACjCe,EAAIR,SAIX,yBAAKS,MAAO,CAAEC,UAAW,SACvB,8DACA,kBAACpB,EAAD,CAAcqB,SAAUZ,EAAkBa,MAAOZ,EAAMa,UAAW,MAClE,kBAACzB,EAAD,CAAY0B,QAASb,GAArB,mB,2dC3FR,IAAMc,EAAgB9B,IAAOC,IAAV,IAaH,SAAA8B,GAAK,OAAKA,EAAMC,UAAY,UAAY,UAC3C,SAAAD,GAAK,OAAKA,EAAMC,UAAY,GAAM,IAkBhCC,EAVC,SAAAF,GACd,OACE,kBAACD,EAAD,CAAeE,UAAWD,EAAMC,WAC9B,6BACE,4BAAKD,EAAMhB,S,0GCrBnB,IAAMmB,EAAUlC,IAAOC,IAAV,KA8CEkC,EAzCH,SAAC,GAA0B,IAAxBvE,EAAuB,EAAvBA,iBAAuB,EACNC,mBAAS,IADH,mBAC7ByD,EAD6B,KACpBc,EADoB,OAEJvE,mBAAS,MAFL,mBAE7BQ,EAF6B,KAEnBgE,EAFmB,KAIpCrE,oBAAU,WACRsE,UAAUC,YAAYC,mBAAmB,SAAAnE,GACvCgE,EAAYhE,MAEb,IAqBH,OACE,yBAAKmD,MAAO,CAAEiB,OAAQ,SACpB,kBAAC,EAAD,CAAST,WAAY3D,EAAU0C,KAAM,+BACrC,kBAAC,EAAD,CAAS2B,QAAQ,EAAM3B,KAAM,oCAC7B,kBAACmB,EAAD,KACE,kBAAC,EAAD,CAAUtE,iBAAkBA,IAC5B,kBAAC,EAAD,CAAMA,iBAAkBA,EAAkBmD,KAAMO,EAASR,iBAzBtC,SAAA6B,GACvBP,EAAWO,EAAMC,OAAOjB,QAwByEX,OArBpF,WACT3C,GACFT,EAAiBiF,KAAK,UAAW,CAC/BvE,IAAKD,EAASyE,OAAOC,SACrBvE,KAAMH,EAASyE,OAAOE,UACtB1B,QAAS,CACPP,KAAMO,EACND,GAAIjD,UAKVgE,EAAW,UCjCTa,G,MAFKC,EAAQ,GAEJC,CAAG,sCAElBC,IAASC,OACP,kBAAC,EAAD,CAAKzF,iBAAkBqF,IACvBK,SAASC,eAAe,W","file":"static/js/main.ea186bef.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Map, TileLayer, Marker } from \"react-leaflet\";\nimport { DivIcon } from \"leaflet\";\nimport * as uuid from \"uuid\";\n\nconst ItalyMap = ({ socketConnection }) => {\n  const [markers, setMarkers] = useState([]);\n\n  useEffect(() => {\n    socketConnection.on(\n      \"msg\",\n      data => {\n        setMarkers(markers => {\n          return markers.concat([\n            {\n              uuid: uuid.v4(),\n              position: { lat: Number(data.lat), long: Number(data.long) }\n            }\n          ]);\n        });\n      },\n      []\n    );\n\n    return () => socketConnection.close();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const props = {\n    zoomControl: false,\n    dragging: false,\n    scrollWheelZoom: false,\n    doubleClickZoom: false\n  };\n\n  return (\n    <Map center={[42.09, 12.13]} zoom={6} {...props}>\n      <TileLayer\n        attribution='&copy <a href=\"http://osm.org/copyright\">BaseMaps</a> contributors'\n        url=\"http://a.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png\"\n      />\n      {markers.map(marker => (\n        <Marker\n          key={marker.uuid}\n          position={[marker.position.lat, marker.position.long]}\n          icon={new DivIcon({ className: \"animated-icon\" })}\n          onAdd={() =>\n            setTimeout(function() {\n              setMarkers(markers => markers.filter(m => m.uuid !== marker.uuid));\n            }, 4000)\n          }\n        />\n      ))}\n    </Map>\n  );\n};\n\nexport default ItalyMap;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nconst ChatWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  flex-grow: 2;\n`;\n\nconst MessagesWrapper = styled.div`\n  max-width: 750px;\n  overflow: hidden;\n  padding: 10px 10px;\n  margin-top: 25px;\n  font-family: \"Cousin\", monospace;\n  text-align: center;\n  min-height: 450px;\n`;\n\nconst SendButton = styled.button`\n  margin-top: 8px;\n  border-radius: 5px;\n  padding: 10px;\n  font-family: \"Montserrat\", sans-serif;\n  font-size: 16px;\n  font-weight: 600;\n  background-color: #eaf2ff;\n`;\n\nconst ChatTextArea = styled.textarea`\n  height: 25%;\n  width: 100%;\n  border-radius: 5px;\n  resize: none;\n`;\n\nconst CHAT_LENGTH = 15;\n\nconst _getRandomColor = () => {\n  const letters = \"0123456789ABCDEF\";\n  let color = \"#\";\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\n\nconst Chat = ({ socketConnection, handleTextChange, text, onSend }) => {\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    socketConnection.on(\"msg\", data => {\n      if (messages.length === CHAT_LENGTH) {\n        setMessages(messages =>\n          messages.slice(1).concat([\n            {\n              id: data.message.id,\n              text: data.message.text,\n              color: _getRandomColor()\n            }\n          ])\n        );\n      } else {\n        setMessages(messages =>\n          messages.concat([\n            {\n              id: data.message.id,\n              text: data.message.text,\n              color: _getRandomColor()\n            }\n          ])\n        );\n      }\n    });\n\n    return () => socketConnection.close();\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <ChatWrapper>\n      <MessagesWrapper>\n        {messages.map(msg => (\n          <p key={msg.id} style={{ color: msg.color }}>\n            {msg.text}\n          </p>\n        ))}\n      </MessagesWrapper>\n      <div style={{ marginTop: \"50px\" }}>\n        <h2>Say something to your friends!</h2>\n        <ChatTextArea onChange={handleTextChange} value={text} maxLength={150} />\n        <SendButton onClick={onSend}>Send message</SendButton>\n      </div>\n    </ChatWrapper>\n  );\n};\n\nexport default Chat;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledOverlay = styled.div`\n  width: 100%;\n  height: 100%;\n  min-height: 100vh;\n  background: #242426;\n  position: absolute;\n  z-index: 9999;\n  top: 0;\n  left: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  visibility: ${props => (props.isVisible ? \"visible\" : \"hidden\")};\n  opacity: ${props => (props.isVisible ? 0.8 : 0)};\n  transition: visibility 0s 1s, opacity 1s linear;\n  @media (max-width: 768px) {\n    opacity: 1;\n    visibility: visible;\n  }\n`;\n\nconst Overlay = props => {\n  return (\n    <StyledOverlay isVisible={props.isVisible}>\n      <div>\n        <h2>{props.text}</h2>\n      </div>\n    </StyledOverlay>\n  );\n};\n\nexport default Overlay;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport * as uuid from \"uuid\";\n\nimport ItalyMap from \"./components/ItalyMap\";\nimport Chat from \"./components/Chat\";\nimport Overlay from \"./components/Overlay\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  height: 100%;\n`;\n\nconst App = ({ socketConnection }) => {\n  const [message, setMessage] = useState(\"\");\n  const [position, setPosition] = useState(null);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      setPosition(position);\n    });\n  }, []);\n\n  const handleTextChange = event => {\n    setMessage(event.target.value);\n  };\n\n  const onSend = () => {\n    if (position) {\n      socketConnection.emit(\"new_msg\", {\n        lat: position.coords.latitude,\n        long: position.coords.longitude,\n        message: {\n          text: message,\n          id: uuid.v4()\n        }\n      });\n    }\n\n    setMessage(\"\");\n  };\n\n  return (\n    <div style={{ height: \"100%\" }}>\n      <Overlay isVisible={!position} text={\"Obtaining your position...\"} />\n      <Overlay mobile={true} text={\"Mobile version not available :(\"} />\n      <Wrapper>\n        <ItalyMap socketConnection={socketConnection} />\n        <Chat socketConnection={socketConnection} text={message} handleTextChange={handleTextChange} onSend={onSend} />\n      </Wrapper>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nconst io = require('socket.io-client');\n\nconst socket = io('https://social-ping-server.now.sh');\n\nReactDOM.render(\n  <App socketConnection={socket}/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}